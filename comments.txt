It's important to note that the component will re-render any time the value returned from useSelector
changes to a new reference. Components should always try to select the smallest possible amount of data
they need from the store, which will help ensure that it only renders when it actually needs to.

===

If an action needs to contain a unique ID or some other random value, always generate that first and put
it in the action object. Reducers should never calculate random values, because that makes the results
unpredictable.

===

But, what if you want to have async logic interact with the store by dispatching or checking the current store state?
That's where Redux middleware come in. They extend the store, and allow you to:

- Execute extra logic when any action is dispatched (such as logging the action and state)
- Pause, modify, delay, replace, or halt dispatched actions
- Write extra code that has access to dispatch and getState
- Teach dispatch how to accept other values besides plain action objects, such as functions and promises,
  by intercepting them and dispatching real action objects instead

===

The word "thunk" is a programming term that means "a piece of code that does some delayed work".

===

It's often a good idea to encapsulate data lookups by writing reusable selectors. You can also create
"memoized" selectors that can help improve performance, which we'll look at in a later part of this tutorial.

But, like any abstraction, it's not something you should do all the time, everywhere. Writing selectors means
more code to understand and maintain. Don't feel like you need to write selectors for every single field
of your state. Try starting without any selectors, and add some later when you find yourself looking up
the same values in many parts of your application code.

===

Thunk Arguments

If you look at our fetchNotifications thunk, it has something new that we haven't seen before. Let's talk about thunk arguments for a minute.

async (_, { getState }) => {
  const notifications = selectAllNotifications(getState())
  const [latestNotification] = notifications
  const latestTimestamp = latestNotification ? latestNotification.date : ''

  const response = await client.get(
    `/fakeApi/notifications?since=${latestTimestamp}`,
  )

  return response.data
},

We've already seen that we can pass an argument into a thunk action creator when we dispatch it, like dispatch(addPost(newPost)). For createAsyncThunk specifically, you can only pass in one argument, and whatever we pass in becomes the first argument of the payload creation callback.

The second argument to our payload creator is a thunkAPI object containing several useful functions and pieces of information:

- dispatch and getState: the actual dispatch and getState methods from our Redux store. You can use these inside the thunk to dispatch more actions, or get the latest Redux store state (such as reading an updated value after another action is dispatched).
- extra: the "extra argument" that can be passed into the thunk middleware when creating the store. This is typically some kind of API wrapper, such as a set of functions that know how to make API calls to your application's server and return data, so that your thunks don't have to have all the URLs and query logic directly inside.
- requestId: a unique random ID value for this thunk call. Useful for tracking status of an individual request.
- signal: An AbortController.signal function that can be used to cancel an in-progress request.
- rejectWithValue: a utility that helps customize the contents of a rejected action if the thunk receives an error.

===

Memoizing Selector Functions

Reselect is a library for creating memoized selector functions, and was specifically designed to be used with Redux. It has a createSelector
function that generates memoized selectors that will only recalculate results when the inputs change. Redux Toolkit exports
the createSelector function, so we already have it available.

export const selectPostsByUser = createSelector(
  [selectAllPosts, (state, userId) => userId],
  (posts, userId) => posts.filter(post => post.user === userId)
)

createSelector takes one or more "input selector" functions as argument, plus an "output selector" function. When we call 
selectPostsByUser(state, userId), createSelector will pass all of the arguments into each of our input selectors.
Whatever those input selectors return becomes the arguments for the output selector.

===

React.memo() will ensure that the component inside of it only re-renders if the props have actually changed.

===

Normalizing Data
You've seen that a lot of our logic has been looking up items by their ID field. Since we've been storing our data in arrays, that
means we have to loop over all the items in the array using array.find() until we find the item with the ID we're looking for.

Realistically, this doesn't take very long, but if we had arrays with hundreds or thousands of items inside, looking through the entire
array to find one item becomes wasted effort. What we need is a way to look up a single item based on its ID, directly, without having
to check all the other items. This process is known as "normalization".

"Normalized state" means that:

- We only have one copy of each particular piece of data in our state, so there's no duplication
- Data that has been normalized is kept in a lookup table, where the item IDs are the keys, and the items themselves are the values.
- There may also be an array of all of the IDs for a particular item type